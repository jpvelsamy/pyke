/*
 * generated by Xtext 2.25.0
 */
package pazmysaz.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import pazmysaz.pyke.Dashboard;
import pazmysaz.pyke.DistributionSummary;
import pazmysaz.pyke.Identity;
import pazmysaz.pyke.LabelSummary;
import pazmysaz.pyke.PykePackage;
import pazmysaz.pyke.Report;
import pazmysaz.pyke.Section;
import pazmysaz.pyke.TrendSummary;
import pazmysaz.services.PykeGrammarAccess;

@SuppressWarnings("all")
public class PykeSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private PykeGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == PykePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case PykePackage.DASHBOARD:
				sequence_Dashboard(context, (Dashboard) semanticObject); 
				return; 
			case PykePackage.DISTRIBUTION_SUMMARY:
				sequence_DistributionSummary(context, (DistributionSummary) semanticObject); 
				return; 
			case PykePackage.IDENTITY:
				sequence_Identity(context, (Identity) semanticObject); 
				return; 
			case PykePackage.LABEL_SUMMARY:
				sequence_LabelSummary(context, (LabelSummary) semanticObject); 
				return; 
			case PykePackage.REPORT:
				sequence_Report(context, (Report) semanticObject); 
				return; 
			case PykePackage.SECTION:
				sequence_Section(context, (Section) semanticObject); 
				return; 
			case PykePackage.TREND_SUMMARY:
				sequence_TrendSummary(context, (TrendSummary) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Dashboard returns Dashboard
	 *
	 * Constraint:
	 *     (
	 *         name=STRING 
	 *         identity=Identity? 
	 *         labelSummary=LabelSummary? 
	 *         distributionSummary?=DistributionSummary? 
	 *         trendSummary?=TrendSummary? 
	 *         report=Report?
	 *     )
	 */
	protected void sequence_Dashboard(ISerializationContext context, Dashboard semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     DistributionSummary returns DistributionSummary
	 *
	 * Constraint:
	 *     (name=STRING lhs=Section mhs=Section? rhs=Section? edge+=Section*)
	 */
	protected void sequence_DistributionSummary(ISerializationContext context, DistributionSummary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Identity returns Identity
	 *
	 * Constraint:
	 *     (name=STRING lhs=Section mhs=Section? rhs=Section? edge+=Section*)
	 */
	protected void sequence_Identity(ISerializationContext context, Identity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     LabelSummary returns LabelSummary
	 *
	 * Constraint:
	 *     (name=STRING lhs=Section mhs=Section? rhs=Section? edge+=Section*)
	 */
	protected void sequence_LabelSummary(ISerializationContext context, LabelSummary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Report returns Report
	 *
	 * Constraint:
	 *     (name=STRING section=Section?)
	 */
	protected void sequence_Report(ISerializationContext context, Report semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Section returns Section
	 *
	 * Constraint:
	 *     (presentationType=Widget source=STRING value=STRING)
	 */
	protected void sequence_Section(ISerializationContext context, Section semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, PykePackage.Literals.SECTION__PRESENTATION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PykePackage.Literals.SECTION__PRESENTATION_TYPE));
			if (transientValues.isValueTransient(semanticObject, PykePackage.Literals.SECTION__SOURCE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PykePackage.Literals.SECTION__SOURCE));
			if (transientValues.isValueTransient(semanticObject, PykePackage.Literals.SECTION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, PykePackage.Literals.SECTION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSectionAccess().getPresentationTypeWidgetEnumRuleCall_2_0(), semanticObject.getPresentationType());
		feeder.accept(grammarAccess.getSectionAccess().getSourceSTRINGTerminalRuleCall_5_0(), semanticObject.getSource());
		feeder.accept(grammarAccess.getSectionAccess().getValueSTRINGTerminalRuleCall_8_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     TrendSummary returns TrendSummary
	 *
	 * Constraint:
	 *     (name=STRING lhs=Section mhs=Section? rhs=Section? edge+=Section*)
	 */
	protected void sequence_TrendSummary(ISerializationContext context, TrendSummary semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
