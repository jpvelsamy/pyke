/**
 * generated by Xtext 2.25.0
 */
package pazmysaz.pyke.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import pazmysaz.pyke.Dashboard;
import pazmysaz.pyke.Identity;
import pazmysaz.pyke.LabelSummary;
import pazmysaz.pyke.PykePackage;
import pazmysaz.pyke.Report;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Dashboard</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link pazmysaz.pyke.impl.DashboardImpl#getName <em>Name</em>}</li>
 *   <li>{@link pazmysaz.pyke.impl.DashboardImpl#getIdentity <em>Identity</em>}</li>
 *   <li>{@link pazmysaz.pyke.impl.DashboardImpl#getLabelSummary <em>Label Summary</em>}</li>
 *   <li>{@link pazmysaz.pyke.impl.DashboardImpl#isDistributionSummary <em>Distribution Summary</em>}</li>
 *   <li>{@link pazmysaz.pyke.impl.DashboardImpl#isTrendSummary <em>Trend Summary</em>}</li>
 *   <li>{@link pazmysaz.pyke.impl.DashboardImpl#getReport <em>Report</em>}</li>
 * </ul>
 *
 * @generated
 */
public class DashboardImpl extends MinimalEObjectImpl.Container implements Dashboard
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getIdentity() <em>Identity</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getIdentity()
   * @generated
   * @ordered
   */
  protected Identity identity;

  /**
   * The cached value of the '{@link #getLabelSummary() <em>Label Summary</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLabelSummary()
   * @generated
   * @ordered
   */
  protected LabelSummary labelSummary;

  /**
   * The default value of the '{@link #isDistributionSummary() <em>Distribution Summary</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributionSummary()
   * @generated
   * @ordered
   */
  protected static final boolean DISTRIBUTION_SUMMARY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isDistributionSummary() <em>Distribution Summary</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isDistributionSummary()
   * @generated
   * @ordered
   */
  protected boolean distributionSummary = DISTRIBUTION_SUMMARY_EDEFAULT;

  /**
   * The default value of the '{@link #isTrendSummary() <em>Trend Summary</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTrendSummary()
   * @generated
   * @ordered
   */
  protected static final boolean TREND_SUMMARY_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isTrendSummary() <em>Trend Summary</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isTrendSummary()
   * @generated
   * @ordered
   */
  protected boolean trendSummary = TREND_SUMMARY_EDEFAULT;

  /**
   * The cached value of the '{@link #getReport() <em>Report</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getReport()
   * @generated
   * @ordered
   */
  protected Report report;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DashboardImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return PykePackage.Literals.DASHBOARD;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Identity getIdentity()
  {
    return identity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetIdentity(Identity newIdentity, NotificationChain msgs)
  {
    Identity oldIdentity = identity;
    identity = newIdentity;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__IDENTITY, oldIdentity, newIdentity);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setIdentity(Identity newIdentity)
  {
    if (newIdentity != identity)
    {
      NotificationChain msgs = null;
      if (identity != null)
        msgs = ((InternalEObject)identity).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PykePackage.DASHBOARD__IDENTITY, null, msgs);
      if (newIdentity != null)
        msgs = ((InternalEObject)newIdentity).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PykePackage.DASHBOARD__IDENTITY, null, msgs);
      msgs = basicSetIdentity(newIdentity, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__IDENTITY, newIdentity, newIdentity));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LabelSummary getLabelSummary()
  {
    return labelSummary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLabelSummary(LabelSummary newLabelSummary, NotificationChain msgs)
  {
    LabelSummary oldLabelSummary = labelSummary;
    labelSummary = newLabelSummary;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__LABEL_SUMMARY, oldLabelSummary, newLabelSummary);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setLabelSummary(LabelSummary newLabelSummary)
  {
    if (newLabelSummary != labelSummary)
    {
      NotificationChain msgs = null;
      if (labelSummary != null)
        msgs = ((InternalEObject)labelSummary).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PykePackage.DASHBOARD__LABEL_SUMMARY, null, msgs);
      if (newLabelSummary != null)
        msgs = ((InternalEObject)newLabelSummary).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PykePackage.DASHBOARD__LABEL_SUMMARY, null, msgs);
      msgs = basicSetLabelSummary(newLabelSummary, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__LABEL_SUMMARY, newLabelSummary, newLabelSummary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isDistributionSummary()
  {
    return distributionSummary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDistributionSummary(boolean newDistributionSummary)
  {
    boolean oldDistributionSummary = distributionSummary;
    distributionSummary = newDistributionSummary;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__DISTRIBUTION_SUMMARY, oldDistributionSummary, distributionSummary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isTrendSummary()
  {
    return trendSummary;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTrendSummary(boolean newTrendSummary)
  {
    boolean oldTrendSummary = trendSummary;
    trendSummary = newTrendSummary;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__TREND_SUMMARY, oldTrendSummary, trendSummary));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Report getReport()
  {
    return report;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetReport(Report newReport, NotificationChain msgs)
  {
    Report oldReport = report;
    report = newReport;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__REPORT, oldReport, newReport);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setReport(Report newReport)
  {
    if (newReport != report)
    {
      NotificationChain msgs = null;
      if (report != null)
        msgs = ((InternalEObject)report).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - PykePackage.DASHBOARD__REPORT, null, msgs);
      if (newReport != null)
        msgs = ((InternalEObject)newReport).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - PykePackage.DASHBOARD__REPORT, null, msgs);
      msgs = basicSetReport(newReport, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, PykePackage.DASHBOARD__REPORT, newReport, newReport));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case PykePackage.DASHBOARD__IDENTITY:
        return basicSetIdentity(null, msgs);
      case PykePackage.DASHBOARD__LABEL_SUMMARY:
        return basicSetLabelSummary(null, msgs);
      case PykePackage.DASHBOARD__REPORT:
        return basicSetReport(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case PykePackage.DASHBOARD__NAME:
        return getName();
      case PykePackage.DASHBOARD__IDENTITY:
        return getIdentity();
      case PykePackage.DASHBOARD__LABEL_SUMMARY:
        return getLabelSummary();
      case PykePackage.DASHBOARD__DISTRIBUTION_SUMMARY:
        return isDistributionSummary();
      case PykePackage.DASHBOARD__TREND_SUMMARY:
        return isTrendSummary();
      case PykePackage.DASHBOARD__REPORT:
        return getReport();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case PykePackage.DASHBOARD__NAME:
        setName((String)newValue);
        return;
      case PykePackage.DASHBOARD__IDENTITY:
        setIdentity((Identity)newValue);
        return;
      case PykePackage.DASHBOARD__LABEL_SUMMARY:
        setLabelSummary((LabelSummary)newValue);
        return;
      case PykePackage.DASHBOARD__DISTRIBUTION_SUMMARY:
        setDistributionSummary((Boolean)newValue);
        return;
      case PykePackage.DASHBOARD__TREND_SUMMARY:
        setTrendSummary((Boolean)newValue);
        return;
      case PykePackage.DASHBOARD__REPORT:
        setReport((Report)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case PykePackage.DASHBOARD__NAME:
        setName(NAME_EDEFAULT);
        return;
      case PykePackage.DASHBOARD__IDENTITY:
        setIdentity((Identity)null);
        return;
      case PykePackage.DASHBOARD__LABEL_SUMMARY:
        setLabelSummary((LabelSummary)null);
        return;
      case PykePackage.DASHBOARD__DISTRIBUTION_SUMMARY:
        setDistributionSummary(DISTRIBUTION_SUMMARY_EDEFAULT);
        return;
      case PykePackage.DASHBOARD__TREND_SUMMARY:
        setTrendSummary(TREND_SUMMARY_EDEFAULT);
        return;
      case PykePackage.DASHBOARD__REPORT:
        setReport((Report)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case PykePackage.DASHBOARD__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case PykePackage.DASHBOARD__IDENTITY:
        return identity != null;
      case PykePackage.DASHBOARD__LABEL_SUMMARY:
        return labelSummary != null;
      case PykePackage.DASHBOARD__DISTRIBUTION_SUMMARY:
        return distributionSummary != DISTRIBUTION_SUMMARY_EDEFAULT;
      case PykePackage.DASHBOARD__TREND_SUMMARY:
        return trendSummary != TREND_SUMMARY_EDEFAULT;
      case PykePackage.DASHBOARD__REPORT:
        return report != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", distributionSummary: ");
    result.append(distributionSummary);
    result.append(", trendSummary: ");
    result.append(trendSummary);
    result.append(')');
    return result.toString();
  }

} //DashboardImpl
